<style>
	.star-rating {
		font-size: 2rem;
		cursor: pointer;
	}
	.star-rating .star {
		margin-right: 5px;
	}
	.text-warning {
		color: gold;
	}
	.text-secondary {
		color: #ccc;
	}
	.comment-item {
		transition: all 0.3s ease;
	}
	.comment-item:hover {
		background-color: rgba(0, 0, 0, 0.02);
	}
	.form-control:focus {
		box-shadow: none;
		border-color: #0d6efd;
	}
	.dropdown-toggle::after {
		display: none;
	}
	/* Updated search styles */
	.search-container {
		position: relative;
		margin-bottom: 20px;
	}
	.search-input {
		border: 2px solid #0d6efd;
		border-radius: 20px;
		padding-left: 40px;
		width: 100%;
	}
	.search-input:focus {
		border-color: #0b5ed7;
		box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
	}
	.search-icon {
		position: absolute;
		left: 15px;
		top: 50%;
		transform: translateY(-50%);
		color: #0d6efd;
		z-index: 10;
	}

	.btn-like,
	.btn-dislike {
		border: none;
		border-radius: 20px;
		padding: 6px 12px;
		font-size: 14px;
		font-weight: 500;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
	}

	

	.btn-like:hover {
		background-color: rgba(13, 110, 253, 0.2);
	}

	.btn-dislike {
		background-color: rgba(108, 117, 125, 0.1);
		color: #6c757d;
	}

	.btn-dislike:hover {
		background-color: rgba(108, 117, 125, 0.2);
	}

	.count {
		font-weight: 600;
		margin-left: 4px;
	}
</style>

<div
	class="container-fluid ">
	<!-- Rating Section -->
	<div class="card shadow-lg mb-5 rounded-4 border-0">
		<div class="card-body p-4">
			<h2 class="fw-bold mb-4">Rate this event</h2>
			{# rating progress bar #}
			{% if average_rating > 0 %}
				<div class="mb-2 col-2">
					<div class="d-flex justify-content-between align-items-center">
						<small class="text-muted">Average Rating:</small>
						<small>
							<strong>{{ average_rating|number_format(1) }}/5</strong>
						</small>
					</div>
					<div class="progress" style="height: 6px;">
						<div class="progress-bar bg-warning" role="progressbar" style="width: {{ (average_rating/5)*100 }}%" aria-valuenow="{{ average_rating }}" aria-valuemin="0" aria-valuemax="5"></div>
					</div>
				</div>
			{% else %}
				<div class="mb-2 text-muted">
					<small>No ratings yet</small>
				</div>
			{% endif %}
			<form method="post" action="{{ path('app_submit_rating') }}">
				<input type="hidden" name="user_id" value="{{ user.id }}">
				<input type="hidden" name="event_id" value="{{ event.id }}">
				<input type="hidden" name="note" id="ratingValue" value="{{ existing_rating ?? 0 }}">

				<div class="star-rating ml-3 mb-3">
					{% for i in 1..5 %}
						<span class="star" data-value="{{ i }}">
							<i class="fa fa-star {% if existing_rating and i <= existing_rating %}text-warning{% else %}text-secondary{% endif %}"></i>
						</span>
					{% endfor %}
				</div>

				<button type="submit" class="btn btn-primary" id="submitBtn" {% if not existing_rating %} disabled {% endif %}>
					{{ existing_rating ? 'Update Your Rating' : 'Submit Rating' }}
				</button>
			</form>
			{% for message in app.flashes('success') %}
				<div class="alert alert-success">{{ message }}</div>
			{% endfor %}

			{% for message in app.flashes('error') %}
				<div class="alert alert-danger">{{ message }}</div>
			{% endfor %}
		</div>
	</div>

	<!-- Comments Section -->
	<div class="card shadow-lg rounded-4 border-0">
		<div class="card-body p-4">
			<h2 class="fw-bold mb-4">Comments</h2>

			<!-- Add Comment Form -->
			<div class="mb-5">
				<div class="d-flex align-items-start gap-3">
					<img src="{{ asset('images/person_1.jpg') }}" class="rounded-circle mr-3" width="50" height="50" alt="User">
					<div class="flex-grow-1">
						<form action="{{ path('app_add_comment') }}" method="POST" class="position-relative">
							<textarea class="form-control border-2 py-3 px-4 rounded-4" rows="3" name="comment" placeholder="Share your thoughts..." style="resize: none;"></textarea>
							<div class="d-flex justify-content-between align-items-center mt-2">
								<button type="submit" class="btn btn-primary rounded-pill px-4">
									Post Comment
									<i class="fa fa-paper-plane ms-2"></i>
								</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<div class="mb-3">
				{% for label, messages in app.flashes %}
					{% for message in messages %}
						<div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
							{{ message }}
							<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
						</div>
					{% endfor %}
				{% endfor %}
			</div>
			<div class="row">
				<div class="col">
					<div class="search-container mb-4">
						<i class="fa fa-search search-icon"></i>
						<input type="text" id="commentSearch" class="form-control search-input" placeholder="Search comment...">
					</div>
				</div>
				<div class="col"></div>
				<div class="col"></div>
			</div>


			<!-- Comments List -->
			<div class="comment-list" style="min-height: 300px; max-height: 500px; overflow-y: auto;">
				{% for comment in comments %}
					<div class="comment-item mb-4 pb-4 border-bottom" data-comment-id="{{ comment.id }}">
						<div class="d-flex gap-3">
							<img src="{{ comment.utilisateur.imageurl }}" class="rounded-circle mr-2" width="40" height="40" alt="User">
							<div class="flex-grow-1">
								<div class="d-flex justify-content-between align-items-center mb-2">
									<div>
										<h6 class="mb-0 fw-bold">{{ comment.utilisateur.nom }}{{ comment.utilisateur.prenom}}</h6>
										<small class="text-muted">
											<i class="fa fa-clock me-1"></i>
											{{ comment.dateComment|date('Y-m-d') }}
											<span class="mx-2">•</span>
											{{ comment.timeComment|date('H:i:s') }}
											<span class="mx-2">•</span>
											<button class="btn btn-link p-0 btn-translate" data-comment-id="{{ comment.id }}" data-lang="ar" title="Translate to Arabic">
												<i class="fa fa-language"></i>
												<span>AR</span>
											</button>
											<span class="badge sentiment-badge ms-2" id="sentiment-{{ comment.id }}" data-comment="{{ comment.comment }}" style="border-radius: 8px; font-size: 0.9rem;">
												<i class="fa fa-refresh fa-spin"></i>
												<!-- loading spinner initially -->
											</span>

										</small>
									</div>
									<div class="dropdown">
										<button class="btn btn-sm btn-link text-muted" type="button" id="commentDropdown{{ loop.index }}" data-bs-toggle="dropdown" aria-expanded="false">
											<i class="fa fa-ellipsis-v"></i>
										</button>
										<ul class="dropdown-menu dropdown-menu-end" aria-labelledby="commentDropdown{{ loop.index }}">
											<li>
												<a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#editCommentModal{{ comment.id }}">
													<i class="fa fa-edit me-2"></i>
													Update
												</a>
											</li>
											<li><hr class="dropdown-divider"></li>
											<li>
												<form method="POST" action="{{ path('app_comment_delete', {'id': comment.id}) }}" style="display:inline;">
													<button type="submit" class="dropdown-item text-danger" onclick="return confirm('Are you sure you want to delete this comment?');">
														<i class="fa fa-trash me-2"></i>
														Delete
													</button>
												</form>
											</li>
										</ul>
									</div>
								</div>

								<p class="mb-2 comment-text">{{ comment.comment }}</p>
<div class="d-flex align-items-center gap-2">
    <button class="btn btn-like" data-comment-id="{{ comment.id }}" data-type="like">
        <i class="fa fa-thumbs-up me-1"></i>
    </button>
    <span class="count mr-3" id="like-count-{{ comment.id }}" style=" cursor: pointer;" data-comment-id="{{ comment.id }}" data-type="like">{{ comment.nbrLikes }}</span>

    <button class="btn btn-dislike" data-comment-id="{{ comment.id }}" data-type="dislike">
        <i class="fa fa-thumbs-down me-1"></i>
    </button>
    <span class="count" id="dislike-count-{{ comment.id }}" style=" cursor: pointer;" data-comment-id="{{ comment.id }}" data-type="dislike">{{ comment.nbrDislikes }}</span>
</div>

							</div>
						</div>
					</div>

					<!-- Edit Comment Modal for each comment -->
					<div class="modal fade" id="editCommentModal{{ comment.id }}" tabindex="-1" aria-labelledby="editCommentModalLabel{{ comment.id }}" aria-hidden="true">
						<div class="modal-dialog">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title" id="editCommentModalLabel{{ comment.id }}">Edit Comment</h5>
									<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
								</div>
								<form method="POST" action="{{ path('app_comment_update', {'id': comment.id}) }}">
									<div class="modal-body">
										<div class="mb-3">
											<textarea class="form-control" name="comment" rows="5" style="resize: none;">{{ comment.comment }}</textarea>
										</div>
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
										<button type="submit" class="btn btn-primary">Save Changes</button>
									</div>
								</form>
							</div>
						</div>
					</div>
				{% else %}
					<p>No comments yet.</p>
				{% endfor %}
			</div>
		</div>
	</div>
</div>
<!-- Popup Modal for Likes/Dislikes -->
<div id="popup-modal" style="display: none; position: fixed; top: 60%; left: 20%; transform: translate(-50%, -50%); background-color: rgba(0, 0, 0, 0.7); padding: 5px; border-radius: 8px; color: white; z-index: 9999;">
    <button onclick="closePopup()" style="
    	margin-top:5px;
		margin-left: 5px;
        background-color: transparent;
        color: white;
        border: 1px solid white;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s ease;
    ">X</button>
	<div id="popup-content"></div>
    
</div>

<script>
     // Show the popup when like or dislike count is clicked
    document.querySelectorAll('.count').forEach(countElement => {
        countElement.addEventListener('click', function() {
            const commentId = this.getAttribute('data-comment-id');
            const interactionType = this.getAttribute('data-type');
            
            // Fetch the users who liked or disliked the comment
            fetch(`/get-users/${commentId}/${interactionType}`)
                .then(response => response.json())
                .then(data => {
                    let userList = '<ul>';
                    data.users.forEach(user => {
                        userList += `<li>${user.name}</li>`;
                    });
                    userList += '</ul>';
                    document.getElementById('popup-content').innerHTML = userList;
                    document.getElementById('popup-modal').style.display = 'block';
                })
                .catch(error => {
                    console.error('Error fetching users:', error);
                    document.getElementById('popup-content').innerHTML = 'Could not load user data.';
                    document.getElementById('popup-modal').style.display = 'block';
                });
        });
    });

    // Close the popup
    function closePopup() {
        document.getElementById('popup-modal').style.display = 'none';
    }
///////////////////////////////////////////
	document.addEventListener('DOMContentLoaded', function () { // Star rating functionality
const stars = document.querySelectorAll('.star');
const ratingInput = document.getElementById('ratingValue');
const submitBtn = document.getElementById('submitBtn');
let selectedRating = parseInt(ratingInput.value) || 0;

function updateStars(rating) {
stars.forEach((star, index) => {
const icon = star.querySelector('i');
icon.classList.toggle('text-warning', index < rating);
icon.classList.toggle('text-secondary', index >= rating);
});
}

// Initialisation if user already rated
updateStars(selectedRating);
if (selectedRating > 0) {
submitBtn.disabled = false;
}

stars.forEach(star => {
star.addEventListener('mouseover', () => {
const hoverValue = parseInt(star.getAttribute('data-value'));
updateStars(hoverValue);
});

star.addEventListener('mouseleave', () => {
updateStars(selectedRating);
});

star.addEventListener('click', () => {
selectedRating = parseInt(star.getAttribute('data-value'));
ratingInput.value = selectedRating;
submitBtn.disabled = false;
updateStars(selectedRating);
});
});

// Search functionality
const searchInput = document.getElementById('commentSearch');
const comments = document.querySelectorAll('.comment-item');

searchInput.addEventListener('input', function () {
const searchTerm = searchInput.value.toLowerCase();

comments.forEach(comment => {
const name = comment.querySelector('h6').innerText.toLowerCase();
const commentText = comment.querySelector('.comment-text').innerText.toLowerCase();

if (name.includes(searchTerm) || commentText.includes(searchTerm)) {
comment.style.display = '';
} else {
comment.style.display = 'none';
}
});
});
});
// Translation functionality
document.querySelectorAll('.btn-translate').forEach(button => {
button.addEventListener('click', async function () {
const commentId = this.dataset.commentId;
const commentTextElement = document.querySelector(`.comment-item[data-comment-id="${commentId}"] .comment-text`);
const targetLang = this.dataset.lang;
const sourceLang = targetLang === 'ar' ? 'en' : 'ar';
const icon = this.querySelector('i');
const span = this.querySelector('span');

try {
const response = await fetch('/translate', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
},
body: JSON.stringify(
{text: commentTextElement.textContent, source: sourceLang, target: targetLang}
)
});

const data = await response.json();

if (data.translatedText) {
commentTextElement.textContent = data.translatedText;
this.dataset.lang = sourceLang;
span.textContent = targetLang === 'ar' ? 'EN' : 'AR';
this.setAttribute('title', targetLang === 'ar' ? 'Translate to English' : 'Translate to Arabic');

// Show success feedback
const originalText = commentTextElement.dataset.originalText || commentTextElement.textContent;
commentTextElement.dataset.originalText = originalText;

// Flash effect
commentTextElement.style.transition = 'all 0.3s ease';
commentTextElement.style.color = '#28a745';
setTimeout(() => {
commentTextElement.style.color = '';
}, 500);
}
} catch (error) {
console.error('Translation failed:', error);
// Show error feedback
const errorElement = document.createElement('small');
errorElement.className = 'text-danger d-block mt-1';
errorElement.textContent = 'Translation failed. Please try again.';
commentTextElement.after(errorElement);
setTimeout(() => errorElement.remove(), 3000);
}
});
});
// sentiment analyzer
document.addEventListener("DOMContentLoaded", function () {
document.querySelectorAll(".sentiment-badge").forEach(function (badge) {
const comment = badge.getAttribute("data-comment");

fetch('/sentiment', {
method: 'POST',
headers: {
'Content-Type': 'application/x-www-form-urlencoded'
},
body: 'comment=' + encodeURIComponent(comment)
}).then(response => response.json()).then(data => {
if (data.sentiment) {
badge.style.display = "inline-block";
badge.classList.add("ms-2");
badge.innerHTML = '';

switch (data.sentiment) {
case "positive": badge.innerHTML = '<i class="fa fa-smile-o text-success" title="Positive sentiment"></i>';
break;
case "negative": badge.innerHTML = '<i class="fa fa-frown-o text-danger" title="Negative sentiment"></i>';
break;
case "neutral":
default: badge.innerHTML = '<i class="fa fa-meh-o text-secondary" title="Neutral sentiment"></i>';
break;
}
}
}).catch(error => {
console.error("Error fetching sentiment:", error);
badge.innerHTML = '<i class="fa fa-question-circle text-warning" title="Sentiment analysis failed"></i>';
});
});
});
// Like and Dislike functionality
document.addEventListener('DOMContentLoaded', function () {
    // Add event listeners for like and dislike buttons
    document.querySelectorAll('.btn-like').forEach(button => {
        button.addEventListener('click', function () {
            const commentId = this.dataset.commentId;
            sendInteraction(commentId, 'like');
        });
    });

    document.querySelectorAll('.btn-dislike').forEach(button => {
        button.addEventListener('click', function () {
            const commentId = this.dataset.commentId;
            sendInteraction(commentId, 'dislike');
        });
    });

    // Function to send like or dislike interaction to the server
    function sendInteraction(commentId, type) {
        fetch('/interaction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: `commentId=${commentId}&type=${type}`
        })
        .then(response => response.text())
        .then(data => {
            console.log("Server Response: ", data);
            try {
                const jsonData = JSON.parse(data);  // Parse the response to JSON
                if (!jsonData.error) {
                    // Update the like and dislike counts
                    document.getElementById(`like-count-${commentId}`).innerText = jsonData.likes;
                    document.getElementById(`dislike-count-${commentId}`).innerText = jsonData.dislikes;

                    // Update button colors
                    const likeButton = document.querySelector(`.btn-like[data-comment-id="${commentId}"] i`);
                    const dislikeButton = document.querySelector(`.btn-dislike[data-comment-id="${commentId}"] i`);

                    if (type === 'like') {
                        likeButton.style.color = likeButton.style.color === 'blue' ? '' : 'blue';
                        dislikeButton.style.color = '';
                    } else {
                        dislikeButton.style.color = dislikeButton.style.color === 'red' ? '' : 'red';
                        likeButton.style.color = '';
                    }
                } else {
                    console.error('Error:', jsonData.error);  // Log if there's an error
                }
            } catch (e) {
                console.error('Error parsing response:', e);  // Handle JSON parsing error
                console.error('Response was not JSON:', data);  // Log raw response
            }
        })
        .catch(error => {
            console.error('Error during fetch operation:', error);  // Log any other errors
        });
    }
});

</script>
