{% extends 'Admin/Gestionespace/admin_base.html.twig' %}
{% block title %}Eventopia | Liste des Espaces{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<<<<<<< HEAD
=======
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
>>>>>>> 923b300 (metiers API)
    <style>
        :root {
            --primary: #0f4c75;
            --primary-light: #3282b8;
            --light: #f8f9fc;
            --border: #e0e3e8;
            --text: #2d3748;
            --text-light: #718096;
            --success: #4fd69c;
            --danger: #ff6b6b;
        }
        /* Structure principale */
        .admin-content-container {
            padding: 1.5rem;
            background: var(--light);
            min-height: 100vh;
        }
        /* En-tÃªte */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--primary-light);
        }
        .page-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        .page-title i {
            color: var(--primary-light);
        }
        /* Tableau */
        .events-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }
        .events-table th {
            background-color: var(--primary);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
        }
        .events-table th:first-child {
            border-radius: 8px 0 0 8px;
        }
        .events-table th:last-child {
            border-radius: 0 8px 8px 0;
        }
        .events-table tbody tr {
            background: white;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .events-table tbody tr:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .events-table td {
            padding: 15px;
            vertical-align: middle;
        }
        /* Image Container */
        .espace-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        .event-image {
            width: 70px;
            height: 50px;
            border-radius: 6px;
            object-fit: cover;
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8ed 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .event-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .event-image i {
            color: var(--primary-light);
            font-size: 1.2rem;
        }
        /* Status Badge */
        .status-badge {
            padding: 5px 10px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .status-active {
            background-color: rgba(79, 214, 156, 0.15);
            color: var(--success);
        }
        .status-inactive {
            background-color: rgba(255, 107, 107, 0.15);
            color: var(--danger);
        }
        /* Action Buttons */
        .action-btn {
            width: 34px;
            height: 34px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border: none;
            color: var(--text-light);
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .action-btn.edit {
            color: var(--primary-light);
        }
        .action-btn.delete {
            color: var(--danger);
        }
        /* Empty State */
        .empty-state {
            background: white;
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-top: 20px;
        }
        .empty-icon {
            font-size: 3rem;
            color: var(--primary-light);
            margin-bottom: 1.5rem;
        }
        .empty-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 0.75rem;
        }
        .empty-text {
            color: var(--text-light);
            margin-bottom: 1.5rem;
        }
        .empty-action {
            padding: 10px 20px;
            background: var(--primary);
            color: white;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .empty-action:hover {
            background: var(--primary-light);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(15, 76, 117, 0.2);
        }
        /* Search Bar and Filters */
        .table-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        .search-box {
            position: relative;
            width: 300px;
        }
        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }
        .search-input:focus {
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(50, 130, 184, 0.2);
            outline: none;
        }
        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
        }
        .search-clear {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
            cursor: pointer;
            display: none;
        }
        .search-clear.active {
            display: block;
        }
        .table-filters {
            display: flex;
            gap: 10px;
        }
        .filter-btn {
            padding: 8px 15px;
            border-radius: 8px;
            background: white;
            border: 1px solid var(--border);
            font-size: 0.85rem;
            font-weight: 500;
            color: var(--text-light);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .filter-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }
    </style>
{% endblock %}
{% block admin_content %}
    <div class="admin-content-container">
        <div class="page-header">
            <h1 class="page-title"><i class="fas fa-list"></i> Liste des Espaces</h1>
<<<<<<< HEAD
            <a href="{{ path('admin_espace_create') }}" class="btn btn-primary">
                <i class="fas fa-plus"></i> Ajouter un Espace
            </a>
=======
            <div class="d-flex gap-2">
                <a href="{{ path('admin_espace_create') }}" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Ajouter un Espace
                </a>
                <a href="{{ path('admin_espace_export', { q: searchTerm ?? '', etat: selectedEtatFilter ?? 'all' }) }}" class="btn btn-success">
    <i class="fas fa-file-excel"></i> Exporter en Excel
</a>
<a href="{{ path('admin_espace_export_pdf', { q: searchTerm ?? '', etat: selectedEtatFilter ?? 'all' }) }}" class="btn btn-danger">
    <i class="fas fa-file-pdf"></i> Exporter en PDF
</a>
                <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#statisticsModal">
                    <i class="fas fa-chart-pie"></i> Statistiques
                </button>
            </div>
>>>>>>> 923b300 (metiers API)
        </div>
        {# Display flash messages #}
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ type }}">{{ message }}</div>
            {% endfor %}
        {% endfor %}
        {# Search Bar and Filters #}
        <form method="get" action="{{ path('admin_espace_list') }}" class="table-controls mb-4">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" name="q" class="search-input" placeholder="Rechercher un espace..." value="{{ searchTerm ?? '' }}">
                {% if searchTerm %}
                    <a href="{{ path('admin_espace_list') }}" class="search-clear active" title="Effacer la recherche">
                        <i class="fas fa-times"></i>
                    </a>
                {% endif %}
            </div>
            <div class="table-filters">
                <button type="button" class="filter-btn active" data-filter="all">Tous</button>
                <button type="button" class="filter-btn" data-filter="DISPONIBLE">Disponible</button>
                <button type="button" class="filter-btn" data-filter="INDISPONIBLE">Indisponible</button>
            </div>
        </form>
        {# Espace Table #}
        {% if espaces|length > 0 %}
            <table class="events-table">
                <thead>
                    <tr>
                        <th>Espaces</th>
                        <th>Localisation</th>
                        <th>Type d'Espace</th>
                        <th>Ãtat</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for espace in espaces %}
                        <tr data-etat="{{ espace.etat }}">
                            <td>
                                <div class="espace-info">
                                    <div class="event-image">
                                        {% if espace.imageUrl %}
                                            <img src="{{ asset('uploads/images/' ~ espace.imageUrl) }}" alt="{{ espace.nom }}">
                                        {% else %}
                                            <i class="fas fa-image"></i>
                                        {% endif %}
                                    </div>
                                    <div>
                                        <strong>{{ espace.nom }}</strong>
                                    </div>
                                </div>
                            </td>
                            <td>{{ espace.localisation }}</td>
                            <td>{{ espace.typeEspace.type }}</td>
                            <td>
                                <span class="status-badge {{ espace.etat == 'DISPONIBLE' ? 'status-active' : 'status-inactive' }}">
                                    {{ espace.etat }}
                                </span>
                            </td>
                            <td>
                                <div class="event-actions">
                                    <a href="{{ path('admin_espace_edit', {'id': espace.id}) }}" class="action-btn edit" title="Modifier">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <form action="{{ path('admin_espace_delete', {'id': espace.id}) }}" method="POST" class="inline-form">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ espace.id) }}">
                                        <button type="submit" class="action-btn delete" title="Supprimer" onclick="return confirm('Ãtes-vous sÃ»r de vouloir supprimer cet espace ?')">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="far fa-calendar-times"></i>
                </div>
                <h3 class="empty-title">
                    {% if searchTerm %}
                        Aucun espace trouvÃ© pour "{{ searchTerm }}"
                    {% else %}
                        Aucun espace disponible
                    {% endif %}
                </h3>
                <p class="empty-text">
                    {% if searchTerm %}
                        Essayez avec un autre terme de recherche
                    {% else %}
                        Vous n'avez pas encore crÃ©Ã© d'espaces. Commencez par ajouter votre premier espace.
                    {% endif %}
                </p>
                <a href="{{ path('admin_espace_create') }}" class="empty-action">
                    <i class="fas fa-plus"></i> CrÃ©er un espace
                </a>
            </div>
        {% endif %}
    </div>
<<<<<<< HEAD
=======

    <!-- Modal for Statistics -->
    <div class="modal fade" id="statisticsModal" tabindex="-1" aria-labelledby="statisticsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="statisticsModalLabel">Statistiques des Espaces</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Pie Chart for Ãtat -->
                        <div class="col-md-6">
                            <h6>RÃ©partition par Ãtat</h6>
                            <canvas id="etatChart" width="400" height="400"></canvas>
                        </div>
                        <!-- Pie Chart for Type d'Espace -->
                        <div class="col-md-6">
                            <h6>RÃ©partition par Type d'Espace</h6>
                            <canvas id="typeEspaceChart" width="400" height="400"></canvas>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>
>>>>>>> 923b300 (metiers API)
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        // Recherche automatique aprÃ¨s dÃ©lai
        const searchInput = document.querySelector('.search-input');
        let searchTimer;
        searchInput.addEventListener('input', function () {
            clearTimeout(searchTimer);
            searchTimer = setTimeout(() => {
                this.closest('form').submit();
            }, 500);
        });

        // Effacer la recherche
        const searchClear = document.querySelector('.search-clear');
        if (searchClear) {
            searchClear.addEventListener('click', function (e) {
                e.preventDefault();
                window.location.href = this.href;
            });
        }

        // Afficher/masquer le bouton clear
        searchInput.addEventListener('input', function () {
            searchClear.style.display = this.value.trim() ? 'block' : 'none';
        });

        // Filter by etat functionality
        const filterBtns = document.querySelectorAll('.filter-btn');
        const tableRows = document.querySelectorAll('.events-table tbody tr');
        filterBtns.forEach(btn => {
            btn.addEventListener('click', function () {
                // Remove 'active' class from all buttons
                filterBtns.forEach(b => b.classList.remove('active'));
                this.classList.add('active'); // Add 'active' class to the clicked button
                const filter = this.dataset.filter; // Get the selected filter value
                tableRows.forEach(row => {
                    const etat = row.dataset.etat; // Get the row's etat
                    if (filter === 'all' || etat === filter) {
                        row.style.display = ''; // Show the row
                    } else {
                        row.style.display = 'none'; // Hide the row
                    }
                });
            });
        });
    </script>
<<<<<<< HEAD
=======
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const etatChartCtx = document.getElementById('etatChart').getContext('2d');
            const typeEspaceChartCtx = document.getElementById('typeEspaceChart').getContext('2d');

            // Fetch statistics data from the backend
            fetch("{{ path('admin_espace_statistics') }}")
                .then(response => response.json())
                .then(data => {
                    // Helper function to calculate percentages
                    const calculatePercentages = (data) => {
                        const total = Object.values(data).reduce((sum, value) => sum + value, 0);
                        return Object.fromEntries(
                            Object.entries(data).map(([key, value]) => [key, ((value / total) * 100).toFixed(1)])
                        );
                    };

                    // Calculate percentages for Ãtat and Type d'Espace
                    const etatPercentages = calculatePercentages(data.etat);
                    const typeEspacePercentages = calculatePercentages(data.typeEspace);

                    // Render Ãtat Chart
                    new Chart(etatChartCtx, {
                        type: 'pie',
                        data: {
                            labels: Object.keys(data.etat),
                            datasets: [{
                                data: Object.values(data.etat),
                                backgroundColor: ['#4fd69c', '#ff6b6b'], // Green and Red colors
                                borderColor: ['#4fd69c', '#ff6b6b'],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'top' },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            const label = context.label || '';
                                            const value = context.raw || 0;
                                            const percentage = etatPercentages[label];
                                            return `${label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                },
                                datalabels: {
                                    formatter: (value, context) => {
                                        const label = context.chart.data.labels[context.dataIndex];
                                        return `${etatPercentages[label]}%`;
                                    },
                                    color: '#fff', // White text for better visibility
                                    font: { weight: 'bold' }
                                }
                            }
                        },
                        plugins: [ChartDataLabels] // Enable data labels plugin
                    });

                    // Render Type d'Espace Chart
                    new Chart(typeEspaceChartCtx, {
                        type: 'pie',
                        data: {
                            labels: Object.keys(data.typeEspace),
                            datasets: [{
                                data: Object.values(data.typeEspace),
                                backgroundColor: ['#3282b8', '#0f4c75', '#bbdefb', '#64b5f6'], // Blue shades
                                borderColor: ['#3282b8', '#0f4c75', '#bbdefb', '#64b5f6'],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'top' },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            const label = context.label || '';
                                            const value = context.raw || 0;
                                            const percentage = typeEspacePercentages[label];
                                            return `${label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                },
                                datalabels: {
                                    formatter: (value, context) => {
                                        const label = context.chart.data.labels[context.dataIndex];
                                        return `${typeEspacePercentages[label]}%`;
                                    },
                                    color: '#fff', // White text for better visibility
                                    font: { weight: 'bold' }
                                }
                            }
                        },
                        plugins: [ChartDataLabels] // Enable data labels plugin
                    });
                })
                .catch(error => console.error('Error fetching statistics:', error));
        });
    </script>
>>>>>>> 923b300 (metiers API)
{% endblock %}